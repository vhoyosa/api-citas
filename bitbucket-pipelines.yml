image: node:14-alpine

options:
  docker: true

pipelines:
  branches:
    development:
      - step:
          name: Compilar y Test
          image: python:3.8
          caches:
            - pip
            - node
          script:
            - rm -rf venv || true
            - PATH=$PATH:/usr/local/bin
            - python3 -m venv venv
            - source venv/bin/activate
            - pip install -U pip setuptools
            - pip install -r requirements.txt
            - export RDS_USERNAME='losDepende'
            - export RDS_PASSWORD='12345'
            - export RDS_DB_NAME='apis-citas'
            - export RDS_HOSTNAME=localhost
            - export RDS_PORT=5432
            - cd proyecto_citas
            - psql -U losDepende -h localhost -c 'drop database "test_'$RDS_DB_NAME'"' postgres || true
            - coverage run --branch --source='.' manage.py test --settings config.settings.test
            - coverage xml
            - pylint -f parseable $(ls **/*.py | grep -v migration | grep -v manage.py) | tee pylint.out
          services: 
            - postgres
      - step:
          name: Crear y subir imagenes a DockerHub
          services:
            - docker
          caches:
            - docker
          script:
            - export IMAGE_NAME_BACKEND=vhoyosa/proyectocitas:$BITBUCKET_COMMIT
            - export IMAGE_NAME_DB=vhoyosa/db_postgrest_citas:$BITBUCKET_COMMIT
            - docker build -t $IMAGE_NAME_BACKEND -f Dockerfile_backend .
            - docker build -t $IMAGE_NAME_DB -f Dockerfile_postgres .
            - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
            - docker push $IMAGE_NAME_BACKEND
            - docker push $IMAGE_NAME_DB
      - step:
          name: Deploy en Sataging AWS EC2
          image: atlassian/default-image:3
          script:
            - chmod 400 staging-citas.pem
            - ssh-keyscan -H ec2-34-204-78-207.compute-1.amazonaws.com >> ~/.ssh/known_hosts
            - ssh -o StrictHostKeyChecking=no -i staging-citas.pem ec2-user@ec2-34-204-78-207.compute-1.amazonaws.com
            # Dentro de EC2: Detén y elimina contenedores existentes (ajusta esto según tus necesidades)
            - docker stop db_postgres_citas_cont || true
            - docker stop proyecto_citas_cont || true
            - docker rm db_postgres_citas_cont || true
            - docker rm proyecto_citas_cont || true
            # Dentro de EC2: Loguin en DockerHub
            - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
            # Dentro de EC2: Descarga la última imagen Docker desde DockerHub
            - docker pull vhoyosa/proyectocitas:$BITBUCKET_COMMIT
            - docker pull vhoyosa/db_postgrest_citas:$BITBUCKET_COMMIT
            - docker images
            # Crea Red
            - docker network ls
            - docker network create mired
            # Dentro de EC2: Ejecuta un nuevo contenedor con las images descargadas
            - docker create -p29429:5432 --name db_postgres_citas_cont --network mired -e POSTGRES_HOST_AUTH_METHOD=trust -e POSTGRES_DB=apis-citas -e POSTGRES_USER=losDepende -e POSTGRES_PASSWORD=12345  vhoyosa/db_postgrest_citas:$BITBUCKET_COMMIT
            - docker start db_postgres_citas_cont
            - docker create -p8000:8000 --name proyecto_citas_cont --network mired -e DJANGO_SETTINGS_MODULE=config.settings.development -e RDS_USERNAME=losDepende -e RDS_PASSWORD=12345 -e RDS_DB_NAME=citas-apis -e PYTHONPATH=proyecto_citas -e PYTHONUSERBASE=/proyecto_citas/vendor -e SIFTSCIENCE_API_KEY=b8dffbb933d4e88a -e APP_ENVIRONMENT=development vhoyosa/proyectocitas:$BITBUCKET_COMMIT
            - docker start proyecto_citas_cont
            - docker ps -a
            # Sale de EC2
            - exit
definitions: 
  services:
    postgres: 
      image: postgres:14.6 
      variables:
        POSTGRES_DB: 'apis-citas' 
        POSTGRES_USER: 'losDepende'
        POSTGRES_PASSWORD: '12345'
        POSTGRES_HOST_AUTH_METHOD: trust
